{"version":3,"sources":["components/ImageGallery.jsx","components/SearchBar.jsx","components/ImageGalleryItem.jsx","components/Button.jsx","components/Modal.jsx","App.jsx","utils/apiCalls.js","index.js"],"names":["ImageGallery","children","className","SearchBar","getKeyword","useState","setQuery","onSubmit","e","preventDefault","input","target","querySelector","value","console","log","type","name","autoComplete","autoFocus","placeholder","ImageGalleryItem","fetchedImages","onClick","map","webformatURL","tags","id","src","alt","Button","Modal","largeImageURL","tag","useEffect","window","addEventListener","closeModal","removeEventListener","key","currentTarget","App","setFetchedImages","fetchedImagesTotal","setFetchedImagesTotal","perPage","setPerPage","error","setError","isLoading","setIsLoading","query","modal","setModal","setLargeImageURL","setTag","url","fetch","then","dataJson","json","data","hits","total","catch","err","finally","toggleModal","message","inputValueFromSearchBar","length","style","textAlign","color","secondaryColor","height","width","timeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73bace42.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst ImageGallery = ({ children }) => {\r\n  return (\r\n    \r\n      <ul className=\"ImageGallery\">\r\n        {children}      \r\n      </ul>\r\n  );\r\n};\r\n\r\nImageGallery.propTypes = {\r\n  children: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nexport default ImageGallery;\r\n\r\n// key: 23726584 - b0725e8cc2245e4091c11b21f;\r\n// https://pixabay.com/api/\r\n\r\n// https://pixabay.com/api/?key=23726584-b0725e8cc2245e4091c11b21f&q=yellow+flowers&image_type=photo\r\n\r\n// useEffect(() => {\r\n//   if (getStorageItems().length === 0) {\r\n//     setIsLoading(true);\r\n//     getApiData(IMAGE_URL)\r\n//       .then((data) => {\r\n//         console.log(\"pobrano z Api:\", data.hits);\r\n//         setStorageItems(data.hits);\r\n//         setFetchedImages(data.hits);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(\"moj log z error.name\", err.name);\r\n//         setError(err);\r\n//       })\r\n//       .finally(() => setIsLoading(false));\r\n//   } else {\r\n//     setFetchedImages(getStorageItems());\r\n//     console.log(\"localStorage:\", JSON.parse(localStorage.getItem(\"picts\")));\r\n//   }\r\n// }, []);\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SearchBar = ({ getKeyword }) => {\r\n  const [, setQuery] = useState(\"\");\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const input = e.target.querySelector(\"input\");\r\n    getKeyword(input.value);\r\n    setQuery(input.value);\r\n    console.log(input.value);\r\n    input.value = \"\";\r\n  };\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={onSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          name=\"input\"\r\n          // value={query}\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          // onChange={handleChange}\r\n          // onChange={(e) => {\r\n          //   console.log(e.target.value);\r\n          //   setQuery(e.target.value);\r\n          //   console.log(\"query:\", query);\r\n          // }}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  getKeyword: PropTypes.func,\r\n};\r\n\r\nexport default SearchBar;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst ImageGalleryItem = ({ fetchedImages, onClick }) => {\r\n  return fetchedImages.map(({ webformatURL, tags, id }) => (\r\n    <li key={id} className=\"ImageGalleryItem\">\r\n      <img\r\n        className=\"ImageGalleryItem-image\"\r\n        src={webformatURL}\r\n        alt={tags}\r\n        onClick={onClick}\r\n      />\r\n    </li>\r\n  ));\r\n};\r\n\r\n\r\nImageGalleryItem.propTypes = {\r\n  fetchedImages: PropTypes.array.isRequired,\r\n  // onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","// import React from 'react'\r\n// import \"./styles.css\";\r\n//ok\r\n\r\nfunction Button({ onClick }) {\r\n  return (\r\n    <button onClick={onClick} className=\"Button\">\r\n      Load more\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button\r\n\r\n","import React, { useEffect } from 'react'\r\n\r\nconst Modal = ({ largeImageURL, tag, onClick }) => {\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", closeModal);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", closeModal);\r\n    };\r\n  });\r\n\r\n  const closeModal = (e) => {\r\n    if (e.key === \"Escape\" || e.target === e.currentTarget) {\r\n      console.log(\"escape\");\r\n      console.log(\"img\", largeImageURL);\r\n\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Overlay\" onClick={onClick}>\r\n      <div className=\"Modal\">\r\n        <img\r\n          // src=\"https://www.svgrepo.com/show/49706/eye-on-magnifying-glass.svg\"\r\n          src={largeImageURL}\r\n          alt={tag}\r\n          // width=\"360\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal\r\n","// import './App.css';\nimport { useState, useEffect } from \"react\";\nimport { getApiData } from \"./utils/apiCalls\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport \"./components/styles.css\";\n// import ImageGalleryItem from \"./components/ImageGalleryItem\";\nimport ImageGallery from \"./components/ImageGallery\";\nimport SearchBar from \"./components/SearchBar\";\n// import Loader...\nimport ImageGalleryItem from \"./components/ImageGalleryItem\";\nimport Button from \"./components/Button\";\nimport Modal from \"./components/Modal\";\n\nfunction App() {\n  const [fetchedImages, setFetchedImages] = useState([]);\n  const [fetchedImagesTotal, setFetchedImagesTotal] = useState(0);\n  const [perPage, setPerPage] = useState(12);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  // const [query, setQuery] = useState(\"null\");\n  // const [query, setQuery] = useState(\"nul\");\n  const [query, setQuery] = useState(\"nut\");\n  const [modal, setModal] = useState(false);\n  const [largeImageURL, setLargeImageURL] = useState(\"\");\n  const [tag, setTag] = useState(\"\");\n\n  useEffect(() => {\n    setIsLoading(true);\n    // getApiData(IMAGE_URL)\n    getApiData(\n      // `https://pixabay.com/api/?key=23726584-b0725e8cc2245e4091c11b21f&q=${query}&page=${page}&image_type=photo&orientation=horizontal&per_page=6`\n      `https://pixabay.com/api/?key=23726584-b0725e8cc2245e4091c11b21f&q=${query}&page=1&image_type=photo&orientation=horizontal&per_page=${perPage}`\n    )\n      .then((data) => {\n        setFetchedImages(data.hits);\n        setFetchedImagesTotal(data.total);\n      })\n      .catch((err) => setError(\"moj log z error.name\", err.name))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [perPage, query]);\n\n  const getKeyword = (inputValueFromSearchBar) => {\n    //przesylana w propsach do searchbar i tam otrzymuje wartosc z inputa i ustawia ja tu jako query i przy okazji ustawia strone na 1\n    setQuery(inputValueFromSearchBar);\n    setPerPage(12);\n  };\n  const toggleModal = () => {\n    console.log(\"toggleModal klik\");\n    setModal((modal) => !modal);\n    // console.log(e.target.src);\n    // console.log(e.target.alt);\n    console.log(modal);\n  };\n\n  const openModal = (e) => {\n    console.log(\"openModal klik\");\n    setLargeImageURL(e.target.src);\n    setTag(e.target.alt);\n    toggleModal();\n  };\n\n  return (\n    <>\n      {error && <p>Whoops, something went wrong: {error.message}</p>}\n      <SearchBar getKeyword={getKeyword} />\n      {fetchedImages.length > 0 && (\n        <ImageGallery>\n          <ImageGalleryItem fetchedImages={fetchedImages} onClick={openModal} />\n        </ImageGallery>\n      )}\n      {modal && (\n        <Modal largeImageURL={largeImageURL} tag={tag} onClick={toggleModal} />\n      )}\n      {/* {isLoading && <p>Loader..?</p>} */}\n      {isLoading && (\n        <Loader\n          style={{ textAlign: \"center\" }}\n          type=\"MutatingDots\"\n          color=\"#3f51b5\"\n          secondaryColor=\"lightgray\"\n          height={100}\n          width={100}\n          timeout={3000} //3 secs\n        />\n      )}\n      <p style={{ textAlign: \"center\" }}>\n        {fetchedImages.length} z {fetchedImagesTotal}\n      </p>\n      {!isLoading && fetchedImagesTotal > fetchedImages.length && (\n        <Button\n          onClick={() => {\n            setPerPage((perPage) => perPage + 12);\n            console.log(perPage, query);\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","const getApiData = (url) => {\r\n  return fetch(url).then((dataJson) => dataJson.json())    \r\n}\r\n\r\nexport {getApiData}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}